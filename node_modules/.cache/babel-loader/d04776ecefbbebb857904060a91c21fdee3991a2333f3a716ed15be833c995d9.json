{"ast":null,"code":"var _jsxFileName = \"/Users/samnarciso/Downloads/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let i = 0; i < nrows; i++) {\n      let newRow = [];\n      for (let j = 0; j < ncols; j++) {\n        if (Math.random() > chanceLightStartsOn) {\n          newRow.push(true);\n        } else {\n          newRow.push(false);\n        }\n      }\n      initialBoard.push(newRow);\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    // Iterate through each row and cell to check if any cell is turned on (true).\n    for (let i = 0; i < nrows; i++) {\n      for (let j = 0; j < ncols; j++) {\n        if (board[i][j]) {\n          return false; // If any cell is turned on, the player hasn't won yet.\n        }\n      }\n    }\n\n    // If all cells are turned off, the player has won.\n    return true;\n  }\n\n  // Handle cell clicks (flipping cells)\n  const flipCellsAround = coord => {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n      const boardCopy = [...oldBoard];\n\n      // Flip the selected cell and cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      return boardCopy;\n    });\n  };\n\n  // Check for a win condition and display a winning message\n  useEffect(() => {\n    if (hasWon()) {\n      alert(\"Congratulations! You've won!\");\n    }\n  }, [board]);\n\n  // Render the game board\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n          flipCellsAroundMe: () => flipCellsAround(`${rowIndex}-${colIndex}`),\n          isLit: cell\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"P3NWdjLnkMfVVyL6RZ3VodtOEqs=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","i","newRow","j","Math","random","push","hasWon","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","useEffect","alert","className","children","row","rowIndex","cell","colIndex","flipCellsAroundMe","isLit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/samnarciso/Downloads/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let i = 0;i<nrows;i++){\n      let newRow = []\n      for (let j = 0;j<ncols;j++){\n        if (Math.random() > chanceLightStartsOn){\n          newRow.push(true)\n        }\n        else{\n          newRow.push(false)\n        }\n      }\n      initialBoard.push(newRow)\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // Iterate through each row and cell to check if any cell is turned on (true).\n    for (let i = 0; i < nrows; i++) {\n      for (let j = 0; j < ncols; j++) {\n        if (board[i][j]) {\n          return false; // If any cell is turned on, the player hasn't won yet.\n        }\n      }\n    }\n  \n    // If all cells are turned off, the player has won.\n    return true;\n  }\n\n  // Handle cell clicks (flipping cells)\n  const flipCellsAround = (coord) => {\n    setBoard((oldBoard) => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      const boardCopy = [...oldBoard];\n\n      // Flip the selected cell and cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n\n      return boardCopy;\n    });\n  };\n\n  // Check for a win condition and display a winning message\n  useEffect(() => {\n    if (hasWon()) {\n      alert(\"Congratulations! You've won!\");\n    }\n  }, [board]);\n\n  // Render the game board\n  return (\n    <table className=\"Board\">\n      <tbody>\n        {board.map((row, rowIndex) => (\n          <tr key={rowIndex}>\n            {row.map((cell, colIndex) => (\n              <Cell\n                key={`${rowIndex}-${colIndex}`}\n                flipCellsAroundMe={() => flipCellsAround(`${rowIndex}-${colIndex}`)}\n                isLit={cell}\n              />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}